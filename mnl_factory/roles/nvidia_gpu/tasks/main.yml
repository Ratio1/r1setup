---
# Skip this role entirely if skip_gpu is set to true
- name: Skip GPU setup when skip_gpu is true
  debug:
    msg: "GPU setup skipped due to skip_gpu=true configuration"
  when: skip_gpu is defined and skip_gpu
  tags: never

# First check if NVIDIA GPU is present
- name: Check for NVIDIA GPU
  shell: "lspci | grep -i nvidia"
  register: nvidia_gpu_check
  ignore_errors: true
  changed_when: false
  when: skip_gpu is not defined or not skip_gpu
  # This task checks if any NVIDIA GPU is present in the system
  # If no GPU is found, the entire role will be skipped

- name: Skip message if no NVIDIA GPU found
  debug:
    msg: "No NVIDIA GPU detected. Skipping driver installation."
  when: 
    - (skip_gpu is not defined or not skip_gpu)
    - nvidia_gpu_check.rc != 0

# GPU Installation and Setup - Only proceed if GPU is detected
- name: Check if NVIDIA-SMI is available and working (Error is ok)
  command: nvidia-smi
  ignore_errors: true
  register: nvidia_smi_check1
  when: 
    - (skip_gpu is not defined or not skip_gpu)
    - nvidia_gpu_check.rc == 0
  # This task checks if NVIDIA's System Management Interface (nvidia-smi) is available.
  # It is a quick way to verify if NVIDIA drivers are properly installed.

- name: Ensure mokutil is installed
  package:
    name: mokutil
    state: present
  when: 
    - (skip_gpu is not defined or not skip_gpu)
    - nvidia_gpu_check.rc == 0
    - nvidia_smi_check1.rc != 0

- name: Check if Secure Boot is enabled
  command: mokutil --sb-state
  register: sb_state
  when: 
    - (skip_gpu is not defined or not skip_gpu)
    - nvidia_gpu_check.rc == 0
    - nvidia_smi_check1.rc != 0
  ignore_errors: true

- name: Display Secure Boot state
  debug:
    var: sb_state.stdout
  when: 
    - (skip_gpu is not defined or not skip_gpu)
    - nvidia_gpu_check.rc == 0
    - nvidia_smi_check1.rc != 0

# This task checks if Secure Boot is enabled and fails the playbook if it is.
# Secure Boot can prevent the installation of unsigned drivers, including NVIDIA drivers.
- name: Fail task with error if Secure Boot is enabled
  assert:
    that: "'SecureBoot enabled' not in sb_state.stdout"
    msg: "Secure Boot is enabled. Please disable Secure Boot in the BIOS settings and reboot the system."    
  when:
    - (skip_gpu is not defined or not skip_gpu)
    - nvidia_gpu_check.rc == 0
    - nvidia_smi_check1.rc != 0

# First remove any existing NVIDIA packages thoroughly
- name: Remove old NVIDIA packages
  apt:
    name: "{{ item }}"
    state: absent
    purge: yes
  with_items:
    - "nvidia-*"
    - "libnvidia-*"
  when: 
    - (skip_gpu is not defined or not skip_gpu)
    - nvidia_gpu_check.rc == 0
    - nvidia_smi_check1.rc != 0
    - ansible_os_family == "Debian"
  register: nvidia_cleanup
  ignore_errors: true

- name: Cleanup existing NVIDIA drivers
  shell: "apt autoremove nvidia* --purge -y"
  when: 
    - (skip_gpu is not defined or not skip_gpu)
    - nvidia_gpu_check.rc == 0
    - nvidia_smi_check1.rc != 0
  ignore_errors: true
  # Runs only if initial nvidia-smi check failed.
  # This task removes any existing NVIDIA drivers only if nvidia-smi is not found.
  # It ensures that the system is cleaned up before installing new drivers.

- name: Reboot the system
  when: 
    - (skip_gpu is not defined or not skip_gpu)
    - nvidia_gpu_check.rc == 0
    - nvidia_smi_check1.rc != 0
  reboot:
  # Runs only if initial nvidia-smi check failed.
  # A reboot is required after removing the NVIDIA drivers to ensure that changes take effect.
  # The system will only reboot if the NVIDIA drivers were removed.

- name: Wait for system to come back online after reboot
  when: 
    - (skip_gpu is not defined or not skip_gpu)
    - nvidia_gpu_check.rc == 0
    - nvidia_smi_check1.rc != 0
  wait_for_connection:
    delay: 30
    timeout: 300
  # Runs only if initial nvidia-smi check failed.
  # This task waits for the system to come back online after a reboot.
  # It ensures that subsequent tasks do not run before the system is ready.

- name: Update package lists
  apt:
    update_cache: yes
    upgrade: yes
  when: 
    - (skip_gpu is not defined or not skip_gpu)
    - nvidia_gpu_check.rc == 0
    - ansible_os_family == "Debian"
  register: apt_update
  retries: 5
  delay: 10
  until: apt_update is success

- name: Check if ubuntu-drivers is available
  when: 
    - (skip_gpu is not defined or not skip_gpu)
    - nvidia_gpu_check.rc == 0
    - nvidia_smi_check1.rc != 0
  command: which ubuntu-drivers
  register: ubuntu_drivers_check
  ignore_errors: true
  changed_when: false
  # Check if ubuntu-drivers command is available on this system

- name: List GPGPU drivers (Ubuntu systems)
  when: 
    - (skip_gpu is not defined or not skip_gpu)
    - nvidia_gpu_check.rc == 0
    - nvidia_smi_check1.rc != 0
    - ubuntu_drivers_check.rc == 0
  command: ubuntu-drivers list --gpgpu
  register: gpu_drivers_list
  ignore_errors: true
  # Lists the available GPGPU drivers on Ubuntu systems

- name: List available NVIDIA drivers (Non-Ubuntu systems)
  when: 
    - (skip_gpu is not defined or not skip_gpu)
    - nvidia_gpu_check.rc == 0
    - nvidia_smi_check1.rc != 0
    - ubuntu_drivers_check.rc != 0
  shell: "apt search nvidia-driver- | grep '^nvidia-driver-' | head -10"
  register: gpu_drivers_list
  ignore_errors: true
  # Lists available NVIDIA drivers on non-Ubuntu systems

- name: Output GPGPU drivers list
  when: 
    - (skip_gpu is not defined or not skip_gpu)
    - nvidia_gpu_check.rc == 0
    - nvidia_smi_check1.rc != 0
  debug:
    msg: "{{ gpu_drivers_list.stdout if gpu_drivers_list.stdout is defined else 'No driver list available' }}"
  # Outputs the list of available GPGPU drivers for informational purposes.

- name: Extra update package lists
  become: true
  apt:
    update_cache: yes
    upgrade: yes
  when: 
    - (skip_gpu is not defined or not skip_gpu)
    - nvidia_gpu_check.rc == 0
    - ansible_os_family == "Debian"
  register: apt_extra_update
  retries: 5
  delay: 10
  until: apt_extra_update is success

- name: Check if specified NVIDIA driver is available
  when: 
    - (skip_gpu is not defined or not skip_gpu)
    - nvidia_gpu_check.rc == 0
    - nvidia_smi_check1.rc != 0 
    - ansible_os_family == "Debian"
  apt:
    name: "{{ nvidia_driver | default('nvidia-driver-' + nvidia_driver_version)}}"
    state: present
    update_cache: yes
  register: driver_availability_check
  ignore_errors: true
  # Check if the specified driver is available in the repositories

- name: Find best available NVIDIA driver
  when: 
    - (skip_gpu is not defined or not skip_gpu)
    - nvidia_gpu_check.rc == 0
    - nvidia_smi_check1.rc != 0 
    - ansible_os_family == "Debian"
    - driver_availability_check.rc != 0
  shell: "apt search nvidia-driver- | grep '^nvidia-driver-' | grep -E 'driver-[0-9]+' | sort -V | tail -1 | cut -d' ' -f1"
  register: best_available_driver
  ignore_errors: true
  # Find the latest available NVIDIA driver if the specified one isn't available

- name: Set final driver package name
  when: 
    - (skip_gpu is not defined or not skip_gpu)
    - nvidia_gpu_check.rc == 0
    - nvidia_smi_check1.rc != 0 
    - ansible_os_family == "Debian"
  set_fact:
    final_driver_package: "{{ nvidia_driver | default('nvidia-driver-' + nvidia_driver_version) if driver_availability_check.rc == 0 else best_available_driver.stdout }}"
  # Set the final driver package name to use for installation

- name: "Install NVIDIA driver: {{ final_driver_package }}"
  become: true
  when: 
    - (skip_gpu is not defined or not skip_gpu)
    - nvidia_gpu_check.rc == 0
    - nvidia_smi_check1.rc != 0 
    - ansible_os_family == "Debian"
    - final_driver_package is defined
  apt:
    update_cache: yes
    name:
      - "{{ final_driver_package }}"
    state: present
  register: nvidia_driver_installation
  retries: 3
  delay: 10
  until: nvidia_driver_installation is success
  # Runs only if initial nvidia-smi check failed.
  # Installs the specified NVIDIA driver or falls back to the best available one.
  # This task is executed only if the initial check for NVIDIA drivers failed.

- name: Output NVIDIA driver installation result
  when: 
    - (skip_gpu is not defined or not skip_gpu)
    - nvidia_gpu_check.rc == 0
    - nvidia_smi_check1.rc != 0
  debug:
    var: nvidia_driver_installation
  # Runs only if initial nvidia-smi check failed.
  # Outputs the result of the NVIDIA driver installation for verification.

- name: "Hold the nvidia driver package {{ final_driver_package }}"
  become: true
  when: 
    - (skip_gpu is not defined or not skip_gpu)
    - nvidia_gpu_check.rc == 0
    - nvidia_smi_check1.rc != 0 
    - ansible_os_family == "Debian"
    - final_driver_package is defined
  ansible.builtin.dpkg_selections:
    name:  "{{ final_driver_package }}"
    selection: hold
  # Runs only if initial nvidia-smi check failed.
  # This task holds the NVIDIA driver package to prevent it from being automatically updated.

- name: Reboot the system
  when: 
    - (skip_gpu is not defined or not skip_gpu)
    - nvidia_gpu_check.rc == 0
    - nvidia_smi_check1.rc != 0
  reboot:
  # Runs only if initial nvidia-smi check failed.
  # Rebooting again to ensure the new NVIDIA drivers are properly loaded.

- name: Wait for system to come back online after reboot
  when: 
    - (skip_gpu is not defined or not skip_gpu)
    - nvidia_gpu_check.rc == 0
    - nvidia_smi_check1.rc != 0
  wait_for_connection:
    delay: 30
    timeout: 300
  # Runs only if initial nvidia-smi check failed.
  # Waits for the system to be ready after the second reboot.

- name: Check NVIDIA-SMI
  command: "nvidia-smi --query-gpu=gpu_name,memory.total,driver_version,pci.device_id --format=csv"
  register: nvidia_smi_output
  failed_when: nvidia_smi_output.rc != 0
  when: 
    - (skip_gpu is not defined or not skip_gpu)
    - nvidia_gpu_check.rc == 0
  # Verifies that NVIDIA-SMI is functional after driver installation.
  # This is a second check to ensure that the NVIDIA drivers were properly installed.

- name: Output nvidia-smi results
  debug:
    msg: "{{ nvidia_smi_output.stdout }}"
  when: 
    - (skip_gpu is not defined or not skip_gpu)
    - nvidia_gpu_check.rc == 0
  # Outputs the nvidia-smi results for confirmation.

- name: "Check if {{ final_driver_package }} is held"
  command: "dpkg --get-selections | grep {{ final_driver_package }}"
  register: nvidia_driver_held
  when: 
    - (skip_gpu is not defined or not skip_gpu)
    - nvidia_gpu_check.rc == 0
    - ansible_os_family == "Debian"
    - final_driver_package is defined

- name: "Show held {{ final_driver_package }}"
  debug:
    var: nvidia_driver_held
  when: 
    - (skip_gpu is not defined or not skip_gpu)
    - nvidia_gpu_check.rc == 0
    - ansible_os_family == "Debian"
    - final_driver_package is defined
  # Outputs the result of the check for the held NVIDIA driver package.

- name: Install nvtop via Snap
  ansible.builtin.command:
    cmd: snap install nvtop
  become: true
  register: nvtop_install
  changed_when: "'installed' in nvtop_install.stderr"
  failed_when: 
    - nvtop_install.rc != 0 
    - "'already installed' not in nvtop_install.stderr"
  when: 
    - (skip_gpu is not defined or not skip_gpu)
    - nvidia_gpu_check.rc == 0
  # Installs nvtop, a tool for monitoring NVIDIA GPUs, which can be useful for diagnostics and performance monitoring.

- name: Get nvtop version info
  ansible.builtin.command:
    cmd: snap info nvtop
  register: nvtop_info
  become: true
  when: 
    - (skip_gpu is not defined or not skip_gpu)
    - nvidia_gpu_check.rc == 0 