---
#- name: Setup services
#  systemd:
#    name: my_service  # Replace with your actual service name
#    state: started
#    enabled: yes
#  when: ansible_os_family == "Linux"

# Add more service-related tasks here


############### DOCKER ############################
- name: Check if Docker is installed and /etc/docker exists
  stat:
    path: /etc/docker
  register: docker_config_dir
  ignore_errors: yes

- name: Create /etc/docker directory if it doesn't exist
  file:
    path: /etc/docker
    state: directory
    mode: '0755'
  when: not docker_config_dir.stat.exists | default(false)
  ignore_errors: yes

- name: Create /etc/docker/daemon.json
  ansible.builtin.template:
    src: docker_daemon.json.j2
    dest: /etc/docker/daemon.json
    mode: '0644'
  notify: reload docker
  when: docker_config_dir.stat.exists | default(false) or not docker_config_dir.failed | default(false)
  ignore_errors: yes

- name: Reload systemd for docker
  ansible.builtin.command:
    cmd: systemctl daemon-reload
  become: yes
  when:
    - (mnl_debug_deploy is not defined) or (not mnl_debug_deploy | bool)
  ignore_errors: yes

- name: Check if Docker service exists
  command: systemctl status docker
  register: docker_service_status
  changed_when: false
  failed_when: false

- name: Force restart docker
  ansible.builtin.command:
    cmd: systemctl restart docker
  become: yes
  ignore_errors: yes

- name: Reset SSH connection to refresh group membership
  meta: reset_connection
  ignore_errors: yes

- name: Test docker access without sudo
  ansible.builtin.command:
    cmd: docker info
  register: docker_test_result
  changed_when: false
  failed_when: false
  ignore_errors: yes

- name: Debug docker access test
  debug:
    msg: "Docker access test {{ 'passed' if docker_test_result.rc == 0 else 'failed' }}. Group membership {{ 'active' if docker_test_result.rc == 0 else 'may require logout/login or reboot' }}"
  when: docker_test_result is defined


- name: "Remove old service for legacy systems"
  ansible.builtin.file:
    path: /etc/systemd/system/edge_node_service.service
    state: absent
  notify: reload systemd

- name: "Create service for {{ mnl_app_name }}"
  ansible.builtin.template:
    src: edge_node.service.j2
    dest: /etc/systemd/system/{{ edge_node_service_name }}.service
    mode: '0644'
    force: true
  notify: reload systemd

- name: Stop the service
  ansible.builtin.systemd:
    name: "{{ edge_node_service_name }}"
    state: stopped

- name: Reload systemd for edge node service
  ansible.builtin.command:
    cmd: systemctl daemon-reload
  become: yes
  ignore_errors: yes

- name: Start the service
  ansible.builtin.systemd:
    name: "{{ edge_node_service_name }}"
    state: started

############################### SCRIPTS ########################################
## Additional file creating tasks: create show and restart scripts
- name: Create get_logs.sh script
  ansible.builtin.template:
    src: get_logs.sh.j2
    dest: "/usr/local/bin/get_logs"
    mode: '0755'
  become: true

- name: Create restart_service script  # Using template
  ansible.builtin.template:  # Changed from copy to template
    src: restart_service.command.j2  # New template file
    dest: "/usr/local/bin/restart_service"  # Updated destination
    mode: '0755'
  become: true

- name: Create get_node_info script  # Using template
  ansible.builtin.template:  # Changed from copy to template
    src: get_node_info.command.j2  # New template file
    dest: "/usr/local/bin/get_node_info"  # Updated destination
    mode: '0755'
  become: true

- name: Create get_node_history script
  ansible.builtin.copy:
    dest: "/usr/local/bin/get_node_history"
    content: |
      #!/bin/bash
      docker exec -i {{ mnl_docker_container_name }} bash -c "get_node_history"
    mode: '0755'
    force: true
  become: true

- name: Create get_e2_pem_file script
  ansible.builtin.copy:
    dest: "/usr/local/bin/get_e2_pem_file"
    content: |
      #!/bin/bash
      docker exec -i {{ mnl_docker_container_name }} bash -c "get_e2_pem_file"
    mode: '0755'
    force: true
  become: true

################### LEGACY SCRIPTS ##########################

## Additional file creating tasks: create show and restart scripts
- name: Create show.sh script
  ansible.builtin.template:
    src: legacy/show.sh.j2
    dest: "~/show.sh"
    mode: '0755'
    force: true
  become: false

- name: Create restart.sh script
  ansible.builtin.copy:
    dest: "~/restart.sh"
    content: |
      #!/bin/bash
      sudo systemctl enable {{ edge_node_service_name }}
      sudo systemctl restart {{ edge_node_service_name }}
      sudo journalctl -u {{ edge_node_service_name }} -a -n 100 -f
    mode: '0755'
    force: true
  become: false

- name: Create stop.sh script
  ansible.builtin.copy:
    dest: "~/stop.sh"
    content: |
      #!/bin/bash
      sudo systemctl stop {{ edge_node_service_name }}
    mode: '0755'
    force: true
  become: false
