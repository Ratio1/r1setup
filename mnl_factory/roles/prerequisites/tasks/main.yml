---
# First ensure no other apt processes are running
- name: Wait for apt locks
  shell: while fuser /var/lib/dpkg/lock /var/lib/apt/lists/lock /var/cache/apt/archives/lock >/dev/null 2>&1; do sleep 1; done
  when: ansible_os_family == "Debian"

- name: Clean up existing Docker repository configurations
  file:
    path: "{{ item }}"
    state: absent
  with_items:
    - /etc/apt/sources.list.d/docker.list
    - /etc/apt/keyrings/docker.asc
    - /etc/apt/trusted.gpg.d/docker.gpg
    - /etc/apt/sources.list.d/download_docker_com_linux_ubuntu.list
  when: ansible_os_family == "Debian"

- name: Fix broken packages (Debian/Ubuntu)
  apt:
    autoclean: yes
    autoremove: yes
  when: ansible_os_family == "Debian"
  ignore_errors: true

- name: Check for held packages (Debian/Ubuntu)
  shell: apt-mark showhold
  register: held_packages
  when: ansible_os_family == "Debian"
  changed_when: false

- name: Display held packages
  debug:
    msg: "Held packages: {{ held_packages.stdout_lines }}"
  when: ansible_os_family == "Debian" and held_packages.stdout_lines | length > 0

- name: Update package cache (Debian/Ubuntu)
  apt:
    update_cache: yes
    cache_valid_time: 3600
  when: ansible_os_family == "Debian"
  register: apt_update
  retries: 5
  delay: 10
  until: apt_update is success

- name: Update package cache (RHEL)
  dnf:
    update_cache: yes
  when: ansible_os_family == "RedHat"

- name: Install basic packages first (Debian/Ubuntu)
  apt:
    name:
      - apt-transport-https
      - ca-certificates
      - curl
      - software-properties-common
      - python3
      - python3-pip
      - python3-yaml
      - python3-setuptools
      - python3-requests
      - python3-docker
      - python3-urllib3
      - build-essential
      - git
    state: present
    autoremove: yes
    autoclean: yes
  when: ansible_os_family == "Debian"
  register: basic_packages_install
  retries: 5
  delay: 10
  until: basic_packages_install is success

- name: Check current python3 version (Debian/Ubuntu)
  shell: dpkg-query -W -f='${Version}' python3
  register: python3_version
  when: ansible_os_family == "Debian"
  changed_when: false

- name: Display python3 version
  debug:
    msg: "Current python3 version: {{ python3_version.stdout }}"
  when: ansible_os_family == "Debian"

- name: Check available python3-dev versions (Debian/Ubuntu)
  shell: apt-cache policy python3-dev
  register: python3_dev_versions
  when: ansible_os_family == "Debian"
  changed_when: false

- name: Display available python3-dev versions
  debug:
    msg: "Available python3-dev versions: {{ python3_dev_versions.stdout_lines }}"
  when: ansible_os_family == "Debian"

- name: Get available python3-dev package versions (Debian/Ubuntu)
  shell: apt-cache madison python3-dev
  register: python3_dev_available_versions
  when: ansible_os_family == "Debian"
  changed_when: false

- name: Display available python3-dev package versions
  debug:
    msg: "Available python3-dev package versions: {{ python3_dev_available_versions.stdout_lines }}"
  when: ansible_os_family == "Debian"

- name: Install python3-dev with specific version if needed (Debian/Ubuntu)
  apt:
    name: "python3-dev={{ python3_version.stdout }}"
    state: present
    autoremove: yes
    autoclean: yes
  when: ansible_os_family == "Debian"
  register: python3_dev_install
  retries: 5
  delay: 10
  until: python3_dev_install is success
  ignore_errors: true

- name: Install python3-dev without version specification if specific version failed (Debian/Ubuntu)
  apt:
    name: python3-dev
    state: present
    autoremove: yes
    autoclean: yes
  when: ansible_os_family == "Debian" and python3_dev_install is failed
  register: python3_dev_install_generic
  retries: 5
  delay: 10
  until: python3_dev_install_generic is success
  ignore_errors: true

- name: Try to install python3-dev with apt-get directly if apt module failed (Debian/Ubuntu)
  shell: |
    apt-get update
    apt-get install -y python3-dev
  when: ansible_os_family == "Debian" and python3_dev_install is failed and python3_dev_install_generic is failed
  register: python3_dev_install_shell
  retries: 3
  delay: 5
  until: python3_dev_install_shell is success
  ignore_errors: true

- name: Force install python3-dev if all previous attempts failed (Debian/Ubuntu)
  shell: |
    apt-get update
    apt-get install -y python3-dev --fix-broken --allow-downgrades --force-yes
  when: ansible_os_family == "Debian" and python3_dev_install is failed and python3_dev_install_generic is failed and python3_dev_install_shell is failed
  register: force_python3_dev_install
  retries: 3
  delay: 5
  until: force_python3_dev_install is success
  ignore_errors: true

- name: Install required packages (RHEL)
  dnf:
    name:
      - ca-certificates
      - curl
      - dnf-plugins-core
      - python3
      - python3-pip
      - python3-devel
      - python3-pyyaml
      - python3-setuptools
      - python3-requests
      - python3-docker
      - python3-urllib3
      - gcc
      - gcc-c++
      - make
      - git
    state: present
  when: ansible_os_family == "RedHat"

# Python packages for Ansible Docker modules are now installed via system package manager above
# This avoids PEP 668 "externally-managed-environment" issues on newer Python versions

#- name: Ensure system is updated (Debian/Ubuntu)
#  apt:
#    upgrade: full
#    update_cache: yes
#  when: ansible_os_family == "Debian"
#  register: apt_upgrade
#  retries: 5
#  delay: 10
#  until: apt_upgrade is success

#- name: Ensure system is updated (RHEL)
#  dnf:
#    name: "*"
#    state: latest
#  when: ansible_os_family == "RedHat"