---
- name: Remove old Docker installations and configurations
  block:
    - name: Remove old Docker packages
      package:
        name:
          - docker
          - docker-engine
          - docker.io
          - containerd
          - runc
        state: absent

    - name: Remove Docker repository configuration
      file:
        path: "{{ item }}"
        state: absent
      with_items:
        - /etc/apt/sources.list.d/docker.list
        - /etc/apt/keyrings/docker.asc
        - /etc/apt/trusted.gpg.d/docker.gpg

    - name: Clean apt cache
      command: apt-get clean
      changed_when: false

- name: Install prerequisites
  package:
    name:
      - ca-certificates
      - curl
      - gnupg
    state: present
    update_cache: yes

- name: Create Docker keyring directory
  file:
    path: /etc/apt/keyrings
    state: directory
    mode: '0755'

- name: Direct installation method for Ubuntu
  block:
    - name: Ensure /etc/apt/keyrings exists
      file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'
      when: ansible_distribution == "Ubuntu"

    - name: Add Docker GPG key (modern way)
      get_url:
        url: https://download.docker.com/linux/ubuntu/gpg
        dest: /etc/apt/keyrings/docker.asc
        mode: '0644'
      when: ansible_distribution == "Ubuntu"

    - name: Add Docker APT repository (safe for all recent systems)
      apt_repository:
        repo: "deb [arch=amd64 signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
        filename: docker
        state: present
        update_cache: yes
      when: ansible_distribution == "Ubuntu"

    - name: Install Docker packages
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-compose-plugin
        state: present
        update_cache: yes
  when: ansible_distribution == "Ubuntu"

- name: Fallback to script method for non-Ubuntu
  block:
    - name: Download Docker installation script
      get_url:
        url: https://get.docker.com
        dest: /tmp/get-docker.sh
        mode: '0755'

    - name: Execute Docker installation script
      command: /tmp/get-docker.sh
      register: docker_install
      changed_when: docker_install.rc == 0
      failed_when: false  # Don't fail if Docker is already installed

    - name: Debug Docker installation script output
      debug:
        msg: "{{ docker_install.stdout_lines | default([]) }}"
      when: docker_install.stdout is defined and docker_install.stdout != ""

    - name: Debug Docker installation script errors
      debug:
        msg: "{{ docker_install.stderr_lines | default([]) }}"
      when: docker_install.stderr is defined and docker_install.stderr != ""
  when: ansible_distribution != "Ubuntu"

- name: Install Docker Compose
  get_url:
    url: "https://github.com/docker/compose/releases/download/v{{ docker_compose_version }}/docker-compose-Linux-x86_64"
    dest: /usr/local/bin/docker-compose
    mode: '0755'

- name: Ensure docker group exists
  group:
    name: docker
    state: present

- name: Add user to docker group
  user:
    name: "{{ ansible_user }}"
    groups: docker
    append: yes

- name: Gather facts about remote system
  setup:
    gather_subset:
      - distribution

- name: Display target system information
  debug:
    msg: "Target system: {{ ansible_distribution }} {{ ansible_distribution_version }} ({{ ansible_os_family }})"

- name: Check if Docker was successfully installed
  command: which docker
  register: docker_binary
  changed_when: false
  failed_when: false

- name: Debug Docker installation result
  debug:
    msg: "Docker binary found at {{ docker_binary.stdout }} (exit code: {{ docker_binary.rc }})"
  when: docker_binary.rc == 0

- name: Debug Docker installation failure
  debug:
    msg: "Docker binary not found! Check installation script output."
  when: docker_binary.rc != 0

- name: Ensure Docker configuration directory exists
  file:
    path: /etc/docker
    state: directory
    mode: '0755'
  when: docker_binary.rc == 0

- name: Check if daemon.json exists
  stat:
    path: /etc/docker/daemon.json
  register: daemon_json_stat
  when: docker_binary.rc == 0

- name: Create empty daemon.json if it doesn't exist
  copy:
    content: '{}'
    dest: /etc/docker/daemon.json
    mode: '0644'
  when: docker_binary.rc == 0 and not daemon_json_stat.stat.exists | default(false)

- name: Check available systemd services
  shell: systemctl list-units --type=service | grep -i docker || true
  register: docker_systemd_services
  changed_when: false
  when: ansible_service_mgr == "systemd"

- name: Debug available Docker systemd services
  debug:
    msg: "{{ docker_systemd_services.stdout_lines | default(['No Docker systemd services found']) }}"
  when: ansible_service_mgr == "systemd"

- name: Ensure Docker service is enabled and started with systemd
  systemd:
    name: "{{ item }}"
    state: started
    enabled: yes
  with_items:
    - docker.service
    - docker
  register: systemd_start_result
  until: systemd_start_result is success
  retries: 1
  delay: 1
  ignore_errors: yes
  when: ansible_os_family != "Darwin" and ansible_os_family != "Windows" and ansible_service_mgr == "systemd" and docker_binary.rc == 0

- name: Debug systemd result
  debug:
    var: systemd_start_result
  when: ansible_service_mgr == "systemd" and docker_binary.rc == 0

- name: Restart Docker daemon
  systemd:
    name: docker
    state: restarted
    daemon_reload: yes
  when: ansible_os_family != "Darwin" and ansible_os_family != "Windows" and ansible_service_mgr == "systemd" and docker_binary.rc == 0
  ignore_errors: yes

- name: Ensure Docker service is running on Linux systems (non-systemd)
  service:
    name: docker
    state: started
    enabled: yes
  when: ansible_os_family != "Darwin" and ansible_os_family != "Windows" and ansible_service_mgr != "systemd" and docker_binary.rc == 0

- name: Verify Docker is installed on non-Linux systems
  command: which docker
  register: docker_exists
  changed_when: false
  failed_when: false
  when: ansible_os_family == "Darwin" or ansible_os_family == "Windows"

- name: Docker status message on non-Linux systems
  debug:
    msg: "Docker appears to be installed on {{ ansible_distribution }}. Please ensure Docker Desktop is running."
  when: (ansible_os_family == "Darwin" or ansible_os_family == "Windows") and docker_exists.rc == 0

- name: Docker warning on non-Linux systems
  debug:
    msg: "Docker command not found on {{ ansible_distribution }}. Please install Docker Desktop manually and ensure it's running."
  when: (ansible_os_family == "Darwin" or ansible_os_family == "Windows") and docker_exists.rc != 0

- name: Clean up installation script
  file:
    path: /tmp/get-docker.sh
    state: absent

- name: Check if Docker systemd service file exists
  stat:
    path: /lib/systemd/system/docker.service
  register: docker_service_file
  when: ansible_service_mgr == "systemd"

- name: Debug Docker service file status
  debug:
    msg: "Docker service file {{ 'exists' if docker_service_file.stat.exists | default(false) else 'does not exist' }}"
  when: ansible_service_mgr == "systemd"

- name: Verify Docker service is actually running
  command: systemctl is-active docker
  register: docker_active_check
  changed_when: false
  failed_when: false
  when: ansible_service_mgr == "systemd"

- name: Debug Docker service active status
  debug:
    msg: "Docker service is {{ docker_active_check.stdout }}"
  when: ansible_service_mgr == "systemd"

- name: Test Docker functionality
  command: docker info
  register: docker_info
  changed_when: false
  failed_when: false
  when: docker_binary.rc == 0

- name: Debug Docker functionality test
  debug: 
    msg: "Docker test {{ 'passed' if docker_info.rc == 0 else 'failed' }}. If failed but binary exists, service might need restart."
  when: docker_binary.rc == 0

- name: Force Docker restart if it's installed but not working
  systemd:
    name: docker
    state: restarted
    daemon_reload: yes
  when: docker_binary.rc == 0 and docker_info.rc != 0
  ignore_errors: yes

- name: Force Docker reinstallation if service file is missing
  block:
    - name: Remove Docker installation
      package:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-compose-plugin
        state: absent
      when: ansible_os_family == "Debian"

    - name: Ensure /etc/apt/keyrings exists for reinstallation
      file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'
      when: ansible_distribution == "Ubuntu"

    - name: Add Docker GPG key for reinstallation
      get_url:
        url: https://download.docker.com/linux/ubuntu/gpg
        dest: /etc/apt/keyrings/docker.asc
        mode: '0644'
      when: ansible_distribution == "Ubuntu"

    - name: Add Docker APT repository for reinstallation (safe for all recent systems)
      apt_repository:
        repo: "deb [arch=amd64 signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
        filename: docker
        state: present
        update_cache: yes
      when: ansible_distribution == "Ubuntu"

    - name: Install Docker Engine
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-compose-plugin
        state: present
        update_cache: yes
      when: ansible_distribution == "Ubuntu"
  when: ansible_service_mgr == "systemd" and (not docker_service_file.stat.exists | default(false)) and docker_binary.rc == 0

- name: Create Docker systemd service file if missing
  copy:
    dest: /lib/systemd/system/docker.service
    content: |
      [Unit]
      Description=Docker Application Container Engine
      Documentation=https://docs.docker.com
      After=network-online.target firewalld.service
      Wants=network-online.target

      [Service]
      Type=notify
      ExecStart=/usr/bin/dockerd
      ExecReload=/bin/kill -s HUP $MAINPID
      TimeoutSec=0
      RestartSec=2
      Restart=always
      StartLimitBurst=3
      StartLimitInterval=60s
      LimitNOFILE=infinity
      LimitNPROC=infinity
      LimitCORE=infinity
      TasksMax=infinity
      Delegate=yes
      KillMode=process

      [Install]
      WantedBy=multi-user.target
    mode: '0644'
  when: ansible_service_mgr == "systemd" and (not docker_service_file.stat.exists | default(false)) and docker_binary.rc == 0
  register: created_service_file

- name: Run daemon-reload after creating service file
  systemd:
    daemon_reload: yes
  when: created_service_file.changed | default(false) 