---
- name: Stop Edge Node Services
  hosts: gpu_nodes
  become: true
  gather_facts: true
  vars:
    ansible_roles_path: "{{ playbook_dir }}/../roles"
  vars_files:
    - ../group_vars/all.yml
    - ../group_vars/vault.yml
    - ../group_vars/mnl.yml
    - ../group_vars/variables.yml
  tasks:
    - name: Check if service exists
      ansible.builtin.systemd:
        name: "{{ edge_node_service_name }}"
      register: service_exists
      ignore_errors: true

    - name: Display service not found warning
      debug:
        msg: |
          ‚ö†Ô∏è  WARNING: Service '{{ edge_node_service_name }}' not found on {{ inventory_hostname }}
          This usually means the edge node has not been deployed yet.
          Skipping stop operation for this node.
      when: service_exists is failed

    - name: Get current service status before stopping
      ansible.builtin.systemd:
        name: "{{ edge_node_service_name }}"
      register: current_status
      ignore_errors: true
      when: service_exists is not failed

    - name: Display current status
      debug:
        msg: |
          Current service status on {{ inventory_hostname }}: 
          {{ current_status.status.ActiveState | default('unknown') }}
      when: service_exists is not failed

    - name: Stop the edge node service
      ansible.builtin.systemd:
        name: "{{ edge_node_service_name }}"
        state: stopped
      when: service_exists is not failed
      register: service_stop_result

    - name: Disable the edge node service from auto-start
      ansible.builtin.systemd:
        name: "{{ edge_node_service_name }}"
        enabled: false
        daemon_reload: true
      when: service_exists is not failed

    - name: Wait for service to be inactive
      ansible.builtin.systemd:
        name: "{{ edge_node_service_name }}"
      register: service_status
      until: service_status.status.ActiveState == "inactive"
      retries: 30
      delay: 2
      when: service_exists is not failed

    - name: Verify Docker container is stopped
      ansible.builtin.shell: |
        docker ps --filter "name={{ mnl_docker_container_name }}" --format "{{ '{{.Names}}' }}\t{{ '{{.Status}}' }}"
      register: container_check
      ignore_errors: true
      when: service_exists is not failed

    - name: Display stop success
      debug:
        msg: |
          ‚úÖ SUCCESS: Edge node service stopped on {{ inventory_hostname }}
          Service: {{ edge_node_service_name }}
          Status: {{ service_status.status.ActiveState | default('unknown') }}
          Auto-start: Disabled
          Container: {{ 'Stopped' if (container_check is succeeded and mnl_docker_container_name not in container_check.stdout) else 'Still running' }}
      when: service_exists is not failed and service_status.status.ActiveState == "inactive"

    - name: Show final logs before stopping
      ansible.builtin.shell: |
        journalctl -u {{ edge_node_service_name }} -n 3 --no-pager
      register: final_logs
      ignore_errors: true
      when: service_exists is not failed

    - name: Display final logs
      debug:
        msg: |
          Final logs before shutdown:
          {{ final_logs.stdout }}
      when: service_exists is not failed and final_logs.stdout is defined

    - name: Service stop failure warning
      debug:
        msg: |
          ‚ö†Ô∏è  WARNING: Service may not have stopped properly on {{ inventory_hostname }}
          Current status: {{ service_status.status.ActiveState | default('unknown') }}
          You may need to manually stop the service or check for issues.
      when: service_exists is not failed and service_status.status.ActiveState != "inactive"

    - name: Display network impact warning
      debug:
        msg: |
          üö® IMPORTANT: Node {{ inventory_hostname }} is now offline
          ‚Ä¢ The edge node is no longer participating in the network
          ‚Ä¢ This may affect your earnings until the service is restarted
          ‚Ä¢ Use 'Start services' option to bring the node back online
      when: service_exists is not failed and service_status.status.ActiveState == "inactive" 